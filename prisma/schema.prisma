datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  phone     String?
  password  String
  firstName String?
  lastName  String?
  verified  Boolean  @default(false)
  role      Role
  vendorId  String?
  vendor    Vendor?
}

enum Role {
  ADMIN
  USER
}

model Vendor {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String
  active    Boolean @default(true)
  heroImage String?
  logo      String?

  info     VendorInfo?
  bank     VendorBankInfo?
  settings VendorSettings?

  products   Product[]
  categories Category[]
  tags       Tag[]
  coupons    Coupon[]
  orders     Order[]
  booking    Booking[]

  ownerId String @unique @db.ObjectId
  owner   User?  @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Certificate {
  title String
  image String
}

type VendorInfo {
  address        String?
  phone          String?
  email          String?
  addressUrl     String?
  description    String?
  description_ar String?
  heroImage      String?
  logo           String?
  terms          String?
  location       String?
  instagram      String?
  facebook       String?
  snapchat       String?
  whatsapp       String?
  vat_num        String?
  cr_num         String?
  certificates   Certificate[]
  iban           String?
}

enum DeliveryMethods {
  MANDOOB
  SMSA
  PICKUP
}

enum PaymentMethods {
  CASH
  ONLINE
  BANK_TRANSFER
  STORE
}

type DeliveryAreas {
  label    String
  label_ar String
  active   Boolean
  charge   Int
}

type VendorSettings {
  paymentMethods  PaymentMethods[]
  deliveryMethods DeliveryMethods[]
  deliveryAreas   DeliveryAreas[]
}

type VendorBankInfo {
  bankName      String
  iban          String
  accountNumber String
  beneficiary   String
}

model Tag {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  title_ar       String
  vendorId       String                @db.ObjectId
  vendor         Vendor                @relation(fields: [vendorId], references: [id])
  active         Boolean               @default(true)
  availabilities ServiceAvailability[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  CartItem       CartItem[]
  booking        Booking[]
  Product        Product?              @relation(fields: [productId], references: [id])
  productId      String?               @db.ObjectId
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  title_ar  String
  vendorId  String    @db.ObjectId
  Vendor    Vendor    @relation(fields: [vendorId], references: [id])
  tagIds    String[]
  active    Boolean   @default(true)
  sortOrder Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Coupon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String
  discount  Float
  vendorId  String   @db.ObjectId
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductType {
  PRODUCT
  SERVICE
  WORKSHOP
}

enum AttendanceType {
  ONLINE
  PHYSICAL
}

type ProductAttribute {
  key      String
  key_ar   String
  value    String
  value_ar String
}

type ServiceAvailability {
  date        String
  startTime   String
  endTime     String
  isAvailable Boolean @default(true)
}

type Variant {
  id        String
  vendorId  String
  title     String
  title_ar  String
  options   VariantOptions[]
  createdAt DateTime
  updatedAt DateTime
}

type VariantOptions {
  sku      String?
  price    Float?
  image    String?
  title    String?
  title_ar String?
}

model VariantModel {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  vendorId String
  title    String?
  title_ar String?
  options  VariantOptions[]
}

type TimeSlot {
  startTime DateTime
  endTime   DateTime
}

model Product {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  slug                String
  sku                 String?
  title               String
  title_ar            String
  description         String
  description_ar      String
  image               String
  type                ProductType
  vendorId            String             @db.ObjectId
  vendor              Vendor             @relation(fields: [vendorId], references: [id])
  active              Boolean            @default(true)
  minPreorderDays     Int?
  Tags                Tag[]
  workshopBookedCount Int?
  category            Category?          @relation(fields: [categoryId], references: [id])
  categoryId          String?            @db.ObjectId
  noOfSeats           Int?
  itemsInStock        Int?
  variants            Variant[]
  attributes          ProductAttribute[]
  sortOrder           Int                @default(0)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  CartItem            CartItem[]
  tagIds              String[]           @db.ObjectId
  attendanceType      AttendanceType?
  meetingLink         String?
  location            String?
  endTime             Boolean?           @default(false)
  customerLocation    Boolean?           @default(false)
  duration            Int?
  startDate           DateTime           @default(now())
  endDate             DateTime           @default(now())

  booking Booking[]
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId      String  @db.ObjectId
  product        Product @relation(fields: [productId], references: [id])
  productVariant String?

  Variant Variant[]

  quantity Int           @default(1)
  tagId    String?       @db.ObjectId
  tag      Tag?          @relation(fields: [tagId], references: [id])
  slots    BookingTime[]

  cartId String? @db.ObjectId
  Cart   Cart?   @relation(fields: [cartId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  items CartItem[]

  customerId String @unique @db.ObjectId

  totalPrice Float

  appliedCoupon String?

  finalPrice Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Order     Order[]
  booking   Booking[]
}

model Order {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String

  cartId String @db.ObjectId
  Cart   Cart   @relation(fields: [cartId], references: [id])

  customerInfo   CustomerInfo
  deliveryMethod DeliveryMethods?
  paymentMethod  PaymentMethods?
  status         OrderStatus
  vendorId       String           @db.ObjectId
  Vendor         Vendor           @relation(fields: [vendorId], references: [id])
  booking        Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type CustomerInfo {
  firstName String
  lastName  String
  phone     String
  email     String
  address   String?
  city      String?
}

enum OrderStatus {
  CREATED
  PENDING
  COMPLETED
  CONFIRMED
  REJECTED
  FAILED
}

enum BookingStatus {
  HOLD
  PENDING
  CONFIRMED
  REJECTED
}

type BookingTime {
  date      String
  startTime String
  endTime   String
}

model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  cartId        String        @db.ObjectId
  Cart          Cart          @relation(fields: [cartId], references: [id])
  orderId       String?       @db.ObjectId
  Order         Order?        @relation(fields: [orderId], references: [id])
  productId     String        @db.ObjectId
  Product       Product       @relation(fields: [productId], references: [id])
  vendorId      String        @db.ObjectId
  Vendor        Vendor        @relation(fields: [vendorId], references: [id])
  tagId         String        @db.ObjectId
  Tag           Tag           @relation(fields: [tagId], references: [id])
  status        BookingStatus
  times         BookingTime[]
  holdTimestamp DateTime?     @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}
