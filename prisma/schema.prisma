datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstname String?
  lastname  String?
  posts     Post[]
  role      Role
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

enum Role {
  ADMIN
  USER
}

model Vendor {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  storeStatus    Boolean
  active         Boolean    @default(false)
  address        String
  phone          String
  email          String
  bankName       String
  iban           String
  accountNumber  String
  beneficiary    String
  addressUrl     String
  url            String     @unique
  isCheck        Boolean    @default(false)
  shortName      Boolean
  description_ar String
  terms          String
  isOpen         Boolean    @default(false)
  demo           Boolean    @default(false)
  Product        Product[]
  Category       Category[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Cart           Cart[]
  Order          Order[]
  Tag            Tag[]
  Coupon         Coupon[]
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  title_ar  String
  active    Boolean
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  title_ar  String
  vendorId  String
  vendor    Vendor    @relation(fields: [vendorId], references: [id])
  active    Boolean   @default(false)
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Coupon {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  title_ar  String
  vendorId  String
  vendor    Vendor    @relation(fields: [vendorId], references: [id])
  active    Boolean   @default(false)
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ProductType {
  PRODUCT
  SERVICE
  WORKSHOP
}

type ProductAttribute {
  key      String
  key_ar   String
  value    String
  value_ar String
}

model ProductVariant {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  sku            String
  title          String
  title_ar       String
  description    String
  description_ar String
  previewImage   String
  image          String
  active         Boolean            @default(false)
  price          Float
  price_ar       Float
  attributes     ProductAttribute[]
  productId      String?            @db.ObjectId
  Product        Product?           @relation(fields: [productId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  CartItem       CartItem[]
}

type ServiceAvailabilities {
  startTime DateTime
  endTime   DateTime
}

model Product {
  id              String                  @id @default(auto()) @map("_id") @db.ObjectId
  sku             String
  title           String
  title_ar        String
  description     String
  description_ar  String
  previewImage    String
  image           String
  type            ProductType
  vendorId        String                  @db.ObjectId
  vendor          Vendor                  @relation(fields: [vendorId], references: [id])
  active          Boolean                 @default(false)
  minPreorderDays Int
  price           Float
  price_ar        Float
  category        Category?               @relation(fields: [categoryId], references: [id])
  categoryId      String                  @db.ObjectId
  noOfSeats       Int?
  availabilities  ServiceAvailabilities[]
  variants        ProductVariant[]
  attributes      ProductAttribute[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  CartItem        CartItem[]
  Coupon          Coupon?                 @relation(fields: [couponId], references: [id])
  couponId        String?                 @db.ObjectId
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  productVariantId String?         @db.ObjectId
  variant          ProductVariant? @relation(fields: [productVariantId], references: [id])

  appointmentTime DateTime?

  quantity Int @default(1)

  cartId String @db.ObjectId
  Cart   Cart   @relation(fields: [cartId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  items CartItem[]

  vendorId String @db.ObjectId
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  totalPrice    Float
  totalPrice_ar Float

  ordered   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cartId String @db.ObjectId
  cart   Cart   @relation(fields: [cartId], references: [id])

  totalPrice    Float
  totalPrice_ar Float
  vendorId      String   @db.ObjectId
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
