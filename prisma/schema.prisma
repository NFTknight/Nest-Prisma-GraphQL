datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  phone     String?
  password  String
  firstName String?
  lastName  String?
  verified  Boolean  @default(false)
  role      Role
  vendorId  String?
  vendor    Vendor?
}

enum Role {
  ADMIN
  USER
  VENDOR
  AGENT
}

model Vendor {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  name_ar       String?
  slug          String
  MF_vendorCode Int?
  active        Boolean @default(false)

  info     VendorInfo?
  bank     VendorBankInfo?
  settings VendorSettings?

  products   Product[]
  categories Category[]
  tags       Tag[]
  coupons    Coupon[]
  orders     Order[]
  booking    Booking[]
  forms      Form[]

  ownerId String @unique @db.ObjectId
  owner   User?  @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart[]
}

type Certificate {
  title String
  image String
}

type VendorInfo {
  address        String?
  phone          String?
  email          String?
  city           String?
  addressUrl     String?
  description    String?
  description_ar String?
  heroImage      String?
  logo           String?
  terms          String?
  location       Location?
  instagram      String?
  facebook       String?
  snapchat       String?
  whatsapp       String?
  vatNum         String?
  crNum          String?

  freelanceNum String?
  maroofNum    String?
  certificates Certificate[]
}

enum DeliveryMethods {
  MANDOOB
  SMSA
  PICKUP
  DIGITAL_PRODUCT
}

enum PaymentMethods {
  CASH
  ONLINE
  BANK_TRANSFER
  STORE
}

type DeliveryAreas {
  label    String
  label_ar String
  active   Boolean
  charge   Int
}

type VendorSettings {
  paymentMethods  PaymentMethods[]
  deliveryMethods DeliveryMethods[]
  deliveryAreas   DeliveryAreas[]
}

type VendorBankInfo {
  bankName      String
  iban          String
  accountNumber String
  beneficiary   String
}

model Tag {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  title_ar String

  vendorId String? @db.ObjectId
  vendor   Vendor? @relation(fields: [vendorId], references: [id], onDelete: SetNull)

  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId

  active   Boolean   @default(true)
  workdays WorkDay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
}

enum Weekday {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

type WorkDay {
  day  Weekday
  from String
  to   String
}

model Category {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  title_ar String
  vendorId String  @db.ObjectId
  vendor   Vendor  @relation(fields: [vendorId], references: [id])
  slug     String?

  active    Boolean   @default(true)
  sortOrder Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Coupon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String
  discount  Float
  vendorId  String   @db.ObjectId
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductType {
  PRODUCT
  SERVICE
  WORKSHOP
}

enum AttendanceType {
  ONLINE
  PHYSICAL
}

type BadgeType {
  label AttendanceType
}

type VariantOption {
  default  Boolean?
  sku      String
  price    Float
  quantity Int?     @default(1)
  image    String?
  // removing temporarily
  // images   String[]
  title    String
  title_ar String
}

type TimeSlot {
  startTime DateTime
  endTime   DateTime
}

type Location {
  url     String
  address String
  lat     Float
  lng     Float
}

model Product {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  slug           String
  title          String
  title_ar       String
  description    String
  description_ar String
  image          String
  images         String[]
  type           ProductType

  vendorId String @db.ObjectId
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  tagIds String[] @db.ObjectId
  tags   Tag[]    @relation(fields: [tagIds], references: [id])

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  formId String? @db.ObjectId
  form   Form?   @relation(fields: [formId], references: [id])

  active           Boolean         @default(true)
  minPreorderDays  Int?
  noOfSeats        Int?
  bookedSeats      Int?            @default(0)
  variants         VariantOption[]
  sortOrder        Int             @default(0)
  attendanceType   AttendanceType?
  badge            BadgeType?
  meetingLink      String?
  location         Location?
  endTime          Boolean?        @default(false)
  customerLocation Boolean?        @default(false)
  duration         Int?
  startDate        DateTime?
  endDate          DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]
}

type CartItem {
  productId String        @db.ObjectId
  answers   String?
  sku       String
  price     Float
  quantity  Int           @default(1)
  tagId     String?       @db.ObjectId
  slots     BookingTime[]
}

type CartAddress {
  contactName        String
  contactPhoneNumber String
  country            String
  city               String
  addressLine1       String
  addressUrl         String
}

model Cart {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  items           CartItem[]
  customerId      String
  appliedCoupon   String?
  totalPrice      Float
  deliveryCharges Float?     @default(0)
  subTotal        Float?
  finalPrice      Float

  vendorId String? @db.ObjectId
  vendor   Vendor? @relation(fields: [vendorId], references: [id])

  bookings Booking[]

  customerInfo   CustomerInfo?
  deliveryMethod DeliveryMethods?
  paymentMethod  PaymentMethods?

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Order            Order[]
  consigneeAddress CartAddress?
  shipperAddress   CartAddress?

  deliveryArea String?

  @@unique([customerId, vendorId])
}

type FormResponse {
  productId String
  answers   String
}

type Waybills {
  awb     String
  awbFile String
}

type WayBill {
  sawb                 String
  createDate           String
  shipmentParcelsCount Int
  waybills             Waybills[]
}

model Order {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String

  cartId String? @db.ObjectId
  cart   Cart?   @relation(fields: [cartId], references: [id])

  totalPrice    Float
  subTotal      Float?      @default(0)
  finalPrice    Float
  appliedCoupon String?
  items         CartItem[]
  status        OrderStatus
  customerId    String

  customerInfo   CustomerInfo
  deliveryMethod DeliveryMethods?
  paymentMethod  PaymentMethods

  vendorId String? @db.ObjectId
  vendor   Vendor? @relation(fields: [vendorId], references: [id])

  wayBill WayBill?

  invoiceId String?

  consigneeAddress CartAddress?
  shipperAddress   CartAddress?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name         String
  productId    String
  rating       Float
  variantTitle String
  review       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type CustomerInfo {
  firstName String
  lastName  String
  phone     String
  email     String
  address   String?
  city      String?
}

enum OrderStatus {
  CREATED
  PENDING
  COMPLETED
  CONFIRMED
  REJECTED
  FAILED
}

enum BookingStatus {
  HOLD
  PENDING
  CONFIRMED
  REJECTED
}

type BookingTime {
  from DateTime
  to   DateTime
}

model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  cartId        String?       @db.ObjectId
  cart          Cart?         @relation(fields: [cartId], references: [id], onDelete: SetNull)
  orderId       String?       @db.ObjectId
  productId     String?       @db.ObjectId
  product       Product?      @relation(fields: [productId], references: [id], onDelete: SetNull)
  vendorId      String        @db.ObjectId
  vendor        Vendor        @relation(fields: vendorId, references: id)
  tagId         String        @db.ObjectId
  tag           Tag           @relation(fields: [tagId], references: [id])
  status        BookingStatus
  slots         BookingTime[]
  holdTimestamp DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Form {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  vendorId  String    @db.ObjectId
  vendor    Vendor    @relation(fields: [vendorId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
