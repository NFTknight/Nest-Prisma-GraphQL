datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstname String?
  lastname  String?
  role      Role
}

enum Role {
  ADMIN
  USER
}

model Vendor {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  storeStatus    Boolean
  active         Boolean    @default(false)
  address        String
  phone          String
  email          String
  bankName       String
  iban           String
  accountNumber  String
  beneficiary    String
  addressUrl     String
  slug           String     @unique
  isCheck        Boolean    @default(false)
  shortName      Boolean
  description_ar String
  terms          String
  isOpen         Boolean    @default(false)
  demo           Boolean    @default(false)
  Product        Product[]
  Category       Category[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Cart           Cart[]
  Tag            Tag[]
  Coupon         Coupon[]
  Order          Order[]
}

model Tag {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  title_ar       String
  vendorId       String                @db.ObjectId
  vendor         Vendor                @relation(fields: [vendorId], references: [id])
  active         Boolean               @default(false)
  availabilities ServiceAvailability[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  title_ar  String
  vendorId  String    @db.ObjectId
  Vendor    Vendor    @relation(fields: [vendorId], references: [id])
  tagIds    String[]
  active    Boolean   @default(false)
  sortOrder Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Coupon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String
  discount  Float
  vendorId  String   @db.ObjectId
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductType {
  PRODUCT
  SERVICE
  WORKSHOP
}

type ProductAttribute {
  key      String
  key_ar   String
  value    String
  value_ar String
}

type ServiceAvailability {
  days      String[]
  startTime String
  endTime   String
}

type VariationValue {
  value    String
  value_ar String
}

type VariationOption {
  key    String
  key_ar String
  values VariationValue[]
}

type Variant {
  identifier String
  sku        String
  price      Float
  quantity   Int
}

model Product {
  id               String                @id @default(auto()) @map("_id") @db.ObjectId
  slug             String                @unique
  sku              String
  title            String
  title_ar         String
  description      String
  description_ar   String
  image            String
  type             ProductType
  vendorId         String                @db.ObjectId
  vendor           Vendor                @relation(fields: [vendorId], references: [id])
  active           Boolean               @default(false)
  minPreorderDays  Int
  price            Float
  category         Category?             @relation(fields: [categoryId], references: [id])
  categoryId       String                @db.ObjectId
  noOfSeats        Int?
  itemsInStock     Int?
  availabilities   ServiceAvailability[]
  variationOptions VariationOption[]
  variants         Variant[]
  attributes       ProductAttribute[]
  sortOrder        Int                   @default(0)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  CartItem         CartItem[]
  tagIds           String[]              @db.ObjectId
  startDate        DateTime              @default(now())
  endDate          DateTime              @default(now())
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  productVariant String?

  quantity Int @default(1)

  cartId String @db.ObjectId
  Cart   Cart   @relation(fields: [cartId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  items CartItem[]

  vendorId String @db.ObjectId
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  totalPrice Float

  appliedCoupon String?

  finalPrice Float

  checkedOut Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cartId String @db.ObjectId
  Cart   Cart   @relation(fields: [cartId], references: [id])

  totalAmount Float
  finalAmount Float
  vendorId    String @db.ObjectId
  Vendor      Vendor @relation(fields: [vendorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
